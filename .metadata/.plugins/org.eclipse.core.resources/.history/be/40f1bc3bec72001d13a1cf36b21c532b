package onlinereservationsystem;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Queue;

import check.UserException;

public class LogicalLayer
{
	public void createUser(Map<String,UserInfo> hm)
	{
		StorageLayer store = new StorageLayer();
		String path = "OnlineReservation/passwords/password.ser";
		store.writeIn(path, hm);
	}
	public void createWaitList(String doj)
	{
		StorageLayer store = new StorageLayer();
		Queue<PassengerInfo> waitList = new LinkedList<>();
		String path = "OnlineReservation/Tickets/"+doj+"/waitList.ser";
		store.writeList(path, waitList);
	}
	public void createManifest(String doj)
	{
		StorageLayer store = new StorageLayer();
		Map<String,List<PassengerInfo>> hm = new HashMap<String,List<PassengerInfo>>();
		String path = "OnlineReservation/Tickets/"+doj+"/bookings.ser";
		store.writeIn(path, hm);
	}
	public void createRac(String doj)
	{
		StorageLayer store = new StorageLayer();
		Queue<PassengerInfo> rac = new LinkedList<>();
		String path = "OnlineReservation/Tickets/"+doj+"/rac.ser";
		store.writeList(path, rac);
	}
	public void createCompartment(String doj)
	{
		StorageLayer store = new StorageLayer();
		Integer[] num = new Integer[16];
		String path = "OnlineReservation/Tickets/"+doj+"/train.ser";
		store.writeArray(path,num);
	}
	public int noOfPassengers(String doj) throws UserException
	{
		StorageLayer store = new StorageLayer();
		String path = "OnlineReservation/Tickets/"+doj+"/train.ser";
		Integer[] num = store.readArray(path);
		int len = 0;
		for(Integer i:num)
		{
			if(i != null)
			{
				len++;
			}
		}
		return len;
	}
	public void passwordVerification(String userId,String password) throws UserException
	{
		StorageLayer store = new StorageLayer();
		String path = "OnlineReservation/passwords/password.ser";
		Map<String,UserInfo> hm = store.readFrom(path);
		if(!hm.containsKey(userId))
		{
			throw new check.UserException("Invalid User Id");
		}
		if(!hm.get(userId).getPassword().equals(password))
		{
			throw new check.UserException("Invalid Password");
		}
	}
	public Queue<PassengerInfo> getWaitList(String doj) throws UserException
	{
		StorageLayer store = new StorageLayer();
		String path = "OnlineReservation/Tickets/"+doj+"/waitList.ser";
		Queue<PassengerInfo> waitList = store.readList(path);
		return waitList;
	}
	public Queue<PassengerInfo> getRac(String doj) throws UserException
	{
		StorageLayer store = new StorageLayer();
		String path = "OnlineReservation/Tickets/"+doj+"/rac.ser";
		Queue<PassengerInfo> rac = store.readList(path);
		return rac;
	}
	public int getWaitListLen(String doj) throws UserException
	{
		return getWaitList(doj).size();
	}
	public void find(String doj)
	{
		File file = new File("OnlineReservation/Tickets/"+doj);
		if(file.exists())
		{
			return;
		}
		else
		{
			file.mkdir();
			createWaitList(doj);
			createManifest(doj);
			createCompartment(doj);
			createRac(doj);
		}
	}
	public int book(PassengerInfo passenger) throws UserException
	{
		StorageLayer store = new StorageLayer();
		String path = "OnlineReservation/Tickets/"+passenger.getDoj()+"/train.ser";
		Integer[] num = store.readArray(path);
		int i;
		for(i=0; i<16; i++)
		{
			if(num[i] == null)
			{
				if(i%8 == 7)
				{
					continue;
				}
				num[i] = 1;
				passenger.setSeatNo((i+1));
				store.writeArray(path,num);
				return 1;
			}
		}
		String path2 = "OnlineReservation/Tickets/"+passenger.getDoj()+"/rac.ser";
		Queue<PassengerInfo> rac = store.readList(path2);
		for(int j=7; j<16; j += 8)
		{
			if(num[j] == null)
			{
				num[j]++;
				passenger.setSeatNo(j/8+1);
				passenger.setCoachClass("RAC");
				store.writeArray(path,num);
				rac.add(passenger);
				store.writeList(path2, rac);
				return 1;
			}
			if(num[j] == 1)
			{
				num[j]++;
				passenger.setSeatNo(j/8+2);
				passenger.setCoachClass("RAC");
				store.writeArray(path,num);
				rac.add(passenger);
				store.writeList(path2, rac);
				return 1;
			}
		}
		return -1;
	}
	public void addToWaitList(PassengerInfo passenger) throws UserException
	{
		StorageLayer store = new StorageLayer();
		String path = "OnlineReservation/Tickets/"+passenger.getDoj()+"/waitList.ser";
		Queue<PassengerInfo> waitList = store.readList(path);
		waitList.add(passenger);
		store.writeList(path, waitList);
	}
	public void updateManifest(List<PassengerInfo> list) throws UserException
	{
		StorageLayer store = new StorageLayer();
		String path = "OnlineReservation/Tickets/"+list.get(0).getDoj()+"/bookings.ser";
		Map<String,List<PassengerInfo>> hm = store.readFrom(path);
		hm.put(list.get(0).getPnr(), list);
		store.writeIn(path,hm);
	}
	public List<PassengerInfo> retriveManifest(String pnr,String doj) throws UserException
	{
		StorageLayer store = new StorageLayer();
		String path = "OnlineReservation/Tickets/"+doj+"/bookings.ser";
		Map<String,List<PassengerInfo>> hm = store.readFrom(path);
		if(hm.containsKey(pnr))
		{
			return hm.get(pnr);
		}
		return null;
	}
	public List<PassengerInfo> findFirstWait(String pnr,String doj) throws UserException
	{
		StorageLayer store = new StorageLayer();
		String path = "OnlineReservation/Tickets/"+doj+"/waitList.ser";
		Queue<PassengerInfo> waitList = store.readList(path);
		List<PassengerInfo> list = new ArrayList<PassengerInfo>();
		if(!waitList.isEmpty())
		{
			PassengerInfo pass = waitList.poll();
			while(pass.getPnr() == pnr)
			{
				list.add(pass);
				pass = waitList.poll();
			}
		}
		return list;
	}
	public List<PassengerInfo> findWait(String pnr, String doj) throws UserException
	{
		StorageLayer store = new StorageLayer();
		String path = "OnlineReservation/Tickets/"+doj+"/waitList.ser";
		Queue<PassengerInfo> waitList = store.readList(path);
		List<PassengerInfo> list = new ArrayList<PassengerInfo>();
		Long now = System.currentTimeMillis();
		String time = now.toString();
		time = time.substring(3);
		if(Long.parseLong(pnr) > Long.parseLong(time))
		{
			return list;
		}
		while(!waitList.isEmpty())
		{
			PassengerInfo pass = waitList.poll();
			if(Long.parseLong(pnr) < Long.parseLong(pass.getPnr()))
			{
				return list;
			}
			if(pass.getPnr() == pnr)
			{
				list.add(pass);
			}
		}
		return list;
	}
	public int findPos(PassengerInfo pass)
	{
		StorageLayer store = new StorageLayer();
		String path = "OnlineReservation/Tickets/"+pass.getDoj()+"/waitList.ser";
		Queue<PassengerInfo> waitList = store.readList(path);
		int count = 1;
		while(!waitList.isEmpty())
		{
			PassengerInfo passenger = waitList.poll();
			if(passenger.equals(pass))
			{
				return count;
			}
			count++;
		}
		return -1;
	}
}
